[build-system]
requires = [
    'setuptools',
    # toml is in standard library in 3.11+
    'toml>=0.10.1;python_version<"3.11"',
]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "matic"
authors = [{name = "sterliakov", email = "terlya.stas@gmail.com"}]
readme = "README.md"
description = "Python port of matic.js - library to interact with Polygon blockchain"
license = { file = "LICENSE.md" }
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
]
keywords = ["blockchain", "sdk", "ethereum"]
dependencies = [
    "eth-utils ~= 1.10.0",
    "eth-abi ~= 2.1.1",
    "eth-typing ~= 2.3",
    "hexbytes ~= 0.3.0",
    "pysha3 ~= 1.0.2",
    "requests ~= 2.28",
    "rlp ~= 2.0.1",
    "web3 ~= 5.30.0",
    "ethers ~= 0.1.1",
    "merkle-patricia-trie ~= 0.3.1",
    "typing_extensions ~= 4.3.0",
    "python-dotenv",
]
requires-python = ">=3.8"

[tool.setuptools.dynamic]
version = {attr = "matic.__version__"}

[project.optional-dependencies]
test = [
    'pytest>=6.4.0',
    "pytest-cov",
    "pytest-mock",
    "pytest-subtests",
    "pre-commit",
]
docs = [
    'docutils>=0.14,<0.18',  # Sphinx haven't upgraded yet
    "sphinx>=4.5.0,<5.0.0",
    "sphinx-rtd-theme",
    "autodocsumm>=0.2.8,<0.3.0",
]

[project.urls]
Home = "https://github.com/sterliakov/pymatic"
Source = "https://github.com/sterliakov/pymatic"
Issues = "https://github.com/sterliakov/pymatic/issues"
Documentation = "https://readthedocs.org/projects/pymatic/badge/?version=latest"


[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
markers = [
    'can_timeout',  # takes forever to finish
    'online',  # write + return_transaction
    'offline',  # write (interacts with the chain)
    'read',  # read only (query)
]
addopts = """
    --tb=short
    --cov=matic
    --no-cov-on-fail
    --cov-report=term-missing
    --cov-branch
    --doctest-modules
    --doctest-continue-on-failure
    --ignore=docs
    --color=yes
"""


[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    # Explicitly ignored
    "pragma: no cover",
    # Often used in abstract classes
    "raise NotImplementedError",
    # Debug code
    'if self\.debug:',
    "def __repr__",
    # Scripts entrypoints
    "if __name__ == .__main__.:",
    # Should never run
    '@(abc\.)?abstractmethod',
    # Typing artifact, that has no implementation
    "@overload",
    # Typing artifact, False at runtime
    'if (typing\.)?TYPE_CHECKING:'
]


[tool.mypy]
# This applies to all files (not very strict, used for scripts, etc.)
allow_redefinition = true
check_untyped_defs = true
ignore_missing_imports = true
incremental = true
strict_optional = true
no_implicit_optional = true
show_traceback = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true

# Enforce stricter validation for library code
[[tool.mypy.overrides]]
module = "matic.*"
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
disallow_any_generics = true
warn_no_return = true


[tool.flake8]
exclude = """
    .git,
    .github,
    __pycache__,
    .pytest_cache,
    .env,
    env,
    .pyenv,
    pyenv,
    *.egg_info,
"""
max_line_length = 88
extend_ignore = [
    "SIM905",  # Allow statement "hello world".split() instead of list literal
    # "N806",  # Allow non-"lower_underscore" variables (it's too stupid rule)
    "PIE798",  # Allow class with only static methods for namespacing
    "D105",  # Magic methods may remain unannotated
    "D401",  # Imperative mood of first docstring line is not always encouraged
    "RST306",  # Plugin can't resolve links defined in other docstrings.
    "RST304",  # No builtin roles, so too much to do manually.
    "RST301", "RST201",  # Incompatible with google doc style
    "E203",  # Invalid. Expressions like `[len(x) :]` conform with PEP8, but raise this.
    "D100",  # Modules may remain unannotated
    "D104",  # Packages may remain unannotated
    "D107",  # __init__ may remain unannotated
]
# Ignore
per-file-ignores = [
    "tests/*:D,RST",  # We don't care about docstrings in tests.
    "matic/json_types.py:A003",
]
max-complexity = 10

# Docstring validation
docstring-convention = "google"


[tool.isort]
profile = "black"
